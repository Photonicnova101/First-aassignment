#erosion and dilation

#test_1 trying to make cv2 read the plt

import cv2
import numpy as np
import matplotlib.pyplot as plt

sample = 20
start = -sample
x = np.arange(start,sample,.01)


for a1 in np.arange(15,30,5):

	for a2 in np.arange(.02,.03,.01):

		for a3 in np.arange(1,50,25):

			for a4 in np.arange(-.5,.5,.5):

				for a5 in np.arange(-.5,.5,.5):

					for a6 in np.arange(-.5,.5,.5):

						for a7 in np.arange(-.5,.5,.5):
						
							

							function_values = a1 * np.sin(a2 * x) + a3 * np.sin(x) + a4 * np.cos(a5 * x) + a6 * x + a7 * x**2
							
							print(a1)
...                                                     print(a2)
...                                                     print(a3)
...                                                     print(a4)
...                                                     print(a5)
...                                                     print(a6)
...                                                     print(a7)
							print(" ")
							
							
							
							print(function_values)
							y = function_values

							plt.plot(x,y)




#converts the plot to a readable image
#put any location
plt.savefig('C:\\Users\\Samga\\curve_image.png')

img = cv2.imread('C:\\Users\\Samga\\curve_image.png',cv2.IMREAD_COLOR)
kernel = np.ones((5,5), np.uint8)

#choose one or the other
erosion_img = cv2.erode(img, kernel, iterations = 1)
dilation_img = cv2.dilate(img, kernel, iterations = 1)

#scaling
res =  cv2.resize(input_image,None, fx = 3, fy = 3, interpolation = cv2.INTER_CUBIC)


#translation
rows,cols = img.shape
	# shows image as grayscale and translates 75,100
translation = np.float32([[1,0,75],[0,1,100]])

dst = cv2.warpAffine(img,translation,(cols,rows))

#rotation by 90 degrees
rotation = cv2.getRotationMatrix2D((cols/2,rows/2),90,1)
dst = cv2.warpAffine(img,M,(cols,rows))



#replace  _____ with the transformation that you've chosen


cv2.imshow('image', _______) 
 
